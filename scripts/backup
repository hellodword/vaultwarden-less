#! /usr/bin/env bash

set -e

DB_PATH="/data"
DB_NAME="db.sqlite3"
BACKUP_PATH="/git-backup"
RESTIC_CONFIG_FILE="/restic.json"
RESTIC_CACHE="/restic-cache"

if [ ! -d "$BACKUP_PATH" ]; then
  echo "dir $BACKUP_PATH not exist"
  exit 1
fi
if [ ! -f "$DB_PATH/$DB_NAME" ]; then
  echo "file $DB_PATH/$DB_NAME not exist"
  exit 1
fi
if [ ! -d "$RESTIC_CACHE" ]; then
  echo "dir $RESTIC_CACHE not exist"
  exit 1
fi
if [ ! -f "$RESTIC_CONFIG_FILE" ]; then
  echo "file $RESTIC_CONFIG_FILE not exist"
  exit 1
fi
targets=( $(jq -r 'keys[]' "$RESTIC_CONFIG_FILE" || true) )
if [ ${#targets[*]} = 0 ]; then
  echo "no targets in $RESTIC_CONFIG_FILE"
  exit 1
fi

cd "$BACKUP_PATH"

[ -d ".git" ] || git init
git config user.name bitwarden-backup
git config user.email backup@bitwarden.com

sqlite3 "$DB_PATH/$DB_NAME" .dump > bitwarden.sql

if [ -n "$(git status --porcelain)" ]; then 
  git add bitwarden.sql
  COMMIT_MSG="$(date '+%Y-%m-%d %H:%M:%S')"
  git commit -m "$COMMIT_MSG"

  failed=false

  set +e

  for i in ${!targets[@]}; do
      target="${targets[$i]}"
      echo "backup to $target"
      vars=( $(jq -r --arg target "$target" '.[$target] | keys[]' "$RESTIC_CONFIG_FILE" || true) )
      if [ ${#vars[*]} = 0 ]; then
        echo "no vars in target $target"
        exit 1
      fi

      for j in ${!vars[@]}; do
          var="${vars[$j]}"
          value="$(jq -r --arg target "$target" --arg var "$var" '.[$target] | .[$var]' "$RESTIC_CONFIG_FILE")"
          export "$var"="$value"
      done

      RESTIC=("restic")
      if [ -n "$S3_VIRTUAL_HOSTED_STYLE" ]; then
        RESTIC=("restic" "-o" "s3.bucket-lookup=dns")
        echo "virtual hosted style selected"
      fi
      
      if [ ! -f "$RESTIC_CACHE/$target.init" ]; then
        if "${RESTIC[@]}" check --cache-dir="$RESTIC_CACHE/$target"; then
            touch "$RESTIC_CACHE/$target.init"
        elif "${RESTIC[@]}" init --cache-dir="$RESTIC_CACHE/$target"; then
            touch "$RESTIC_CACHE/$target.init"
        fi
      fi

      if [ ! -f "$RESTIC_CACHE/$target.init" ]; then
        failed=true
      else
        if ! "${RESTIC[@]}" unlock --cache-dir="$RESTIC_CACHE/$target"; then
          failed=true
        else
          if ! "${RESTIC[@]}" backup --cache-dir="$RESTIC_CACHE/$target" "$BACKUP_PATH/bitwarden.sql"; then
            failed=true
          else
            echo "target $target sync successfully"
          fi
        fi
      fi

      for j in ${!vars[@]}; do
          var="${vars[$j]}"
          unset "$var"
      done
  done

  [ "$failed" = "false" ]

else
  echo "clean repo"
fi
