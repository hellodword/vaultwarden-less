#! /usr/bin/env bash

set -e

DB_PATH="/data"
DB_NAME="db.sqlite3"
BACKUP_PATH="/git-backup"
CONFIG_FILE="/config/restic.json"
CACHE_DIR="/restic-cache"
INIT_DIR="$HOME/restic-init"

if [ ! -d "$BACKUP_PATH" ]; then
  echo "dir $BACKUP_PATH not exist"
  exit 1
fi
if [ ! -f "$DB_PATH/$DB_NAME" ]; then
  echo "file $DB_PATH/$DB_NAME not exist"
  exit 1
fi
if [ ! -d "$CACHE_DIR" ]; then
  echo "dir $CACHE_DIR not exist"
  exit 1
fi
if [ ! -f "$CONFIG_FILE" ]; then
  echo "file $CONFIG_FILE not exist"
  exit 1
fi
targets=( $(jq -r 'keys[]' "$CONFIG_FILE" || true) )
if [ ${#targets[*]} = 0 ]; then
  echo "no targets in $CONFIG_FILE"
  exit 1
fi

mkdir -p "$INIT_DIR"

cd "$BACKUP_PATH"

# use git to make sure the database is changed
[ -d ".git" ] || git init
git config user.name bitwarden-backup
git config user.email backup@bitwarden.com
sqlite3 "$DB_PATH/$DB_NAME" .dump > bitwarden.sql
if [ -z "$(git status --porcelain)" ]; then
  echo "++++++++++++ clean repo"
  exit 0
fi
git add bitwarden.sql
COMMIT_MSG="$(date '+%Y-%m-%d %H:%M:%S')"
git commit -m "$COMMIT_MSG"

# backing up
set +e
failed=0

for i in ${!targets[@]}; do
  target="${targets[$i]}"
  echo "++++++++++++ target $target"

  restic_cmd=("env")
  vars=( $(jq -r --arg target "$target" '.[$target] | keys[]' "$CONFIG_FILE" || true) )
  if [ ${#vars[*]} = 0 ]; then
    echo "no vars in target $target"
    exit 1
  fi

  for j in ${!vars[@]}; do
    var="${vars[$j]}"
    value="$(jq -r --arg target "$target" --arg var "$var" '.[$target] | .[$var]' "$CONFIG_FILE")"
    restic_cmd+=("$var"="$value")
  done

  restic_cmd+=("restic")
  if [ "$(jq -r --arg target "$target" '.[$target] | has("S3_VIRTUAL_HOSTED_STYLE")' "$CONFIG_FILE")" = "true" ]; then
    restic_cmd+=("-o" "s3.bucket-lookup=dns")
    echo "++++++++++++ virtual hosted style selected"
  fi

  echo "++++++++++++ initing"
  if [ ! -f "$INIT_DIR/$target" ]; then
    if "${restic_cmd[@]}" snapshots --latest=1 --cache-dir="$CACHE_DIR/$target"; then
      touch "$INIT_DIR/$target"
    elif "${restic_cmd[@]}" init --cache-dir="$CACHE_DIR/$target"; then
      touch "$INIT_DIR/$target"
    else
      failed=$((failed + 1))
      echo "++++++++++++ init failed"
      continue
    fi
  fi

  echo "++++++++++++ unlocking"
  if ! "${restic_cmd[@]}" unlock --cache-dir="$CACHE_DIR/$target"; then
    failed=$((failed + 1))
    echo "++++++++++++ unlock failed"
    continue
  fi

  echo "++++++++++++ backing up"
  if ! "${restic_cmd[@]}" backup --cache-dir="$CACHE_DIR/$target" "$BACKUP_PATH/bitwarden.sql"; then
    failed=$((failed + 1))
    echo "++++++++++++ backup failed"
    continue
  fi

  echo "++++++++++++ pruning"
  if ! "${restic_cmd[@]}" forget --prune --cache-dir="$CACHE_DIR/$target" --keep-daily 7 --keep-weekly 5 --keep-monthly 12 --keep-yearly 75; then
    failed=$((failed + 1))
    echo "++++++++++++ prune failed"
    continue
  fi

  echo "++++++++++++ checking"
  last_check="$(cat "$CACHE_DIR/$target.last_check" 2>/dev/null || echo "0")"
  current_time="$(date +%s)"
  check_opt=()
  if [[ "$(jq -r --arg target "$target" '.[$target] | has("STRICT_CHECK")' "$CONFIG_FILE")" = "true" && $((current_time - last_check)) -ge 86400 ]]; then
    check_opt+=("--no-cache")
    echo "++++++++++++ fully check selected"
    echo "$current_time" > "$CACHE_DIR/$target.last_check"
  else
    check_opt+=("--with-cache" --cache-dir="$CACHE_DIR/$target")
  fi
  if ! "${restic_cmd[@]}" check "${check_opt[@]}"; then
    failed=$((failed + 1))
    echo "++++++++++++ check failed"
    continue
  fi

done

if [ $failed -ne 0 ]; then
  echo "++++++++++++ failed $failed/${#targets[*]}"
  exit 1
fi
